{"pages":[{"title":"About","text":"本人擅长 Ai、Fw、Fl、Br、Ae、Pr、Id、Ps 等软件的安装与卸载，精通 CSS、JavaScript、PHP、ASP、C、C++、C#、Java、Ruby、Perl、Lisp、Python、Objective-C、ActionScript、Pascal 等单词的拼写，熟悉 Windows、Linux、OS X、Android、iOS、WP8 等系统的开关机。逃(","link":"/about/index.html"}],"posts":[{"title":"C Primer Plus 第六版[带书签🔖] PDF 电子书","text":"内容简介 C Primer Plus 详细讲解了C语言的基本概念和编程技巧。 C Primer Plus 共17章。 第1、2章介绍了C语言编程的预备知识。 第3~15章详细讲解了C语言的相关知识，包括数据类型、格式化输入/输出、运算符、表达式、语句、循环、字符输入和输出、函数、数组和指针、字符和字符串函数、内存管理、文件输入输出、结构、位操作等。 第16章、17章介绍C预处理器、C库和高级数据表示。 本书以完整的程序为例，讲解C语言的知识要点和注意事项。每章末设计了大量复习题和编程练习，帮助读者巩固所学知识和提高实际编程能力。附录给出了各章复习题的参考答案和丰富的参考资料。 C Primer Plus 可作为C语言的教材，适用于需要系统学习C语言的初学者，也适用于巩固C语言知识或希望进一步提高编程技术的程序员。 作者简介 Stephen Prata曾在加利福尼亚的马林学院（肯特菲尔德）教授天文学、物理学和程序设计课程，现已退休。他在加州理工学院获得学士学位，在加州大学伯克利分校获得博士学位。他接触程序设计，是为了利用计算机给星团建模。Stephen撰写和与他人合著了十几本书籍，其中包括C++ Primer Plus和Unix Primer Plus。 下载C Primer Plus 第六版 PDF 电子书，笔者也是从互联网收集而来但是发现书内几乎每页都被打上了推广信息。作为一个伪强迫症的我实在是不能忍受，原本打算每看一页就删掉相关内容，但是发现这样很影响阅读的连贯性，于是乎我安装了 Adobe Acrobat 批量删除了所有页面推广信息在此分享给大家！ 百度云☁️：链接: https://pan.baidu.com/s/1TiF_IWKY7AZsos94Ihx6ew 密码: iwa4 PS: Source：[豆瓣] 2017版 C Primer Plus 第6版 中文版.pdf","link":"/2018/08/19/C-Primer-Plus-%E7%AC%AC%E5%85%AD%E7%89%88-%E5%B8%A6%E4%B9%A6%E7%AD%BE%F0%9F%94%96-PDF-%E7%94%B5%E5%AD%90%E4%B9%A6/"},{"title":"ArchLinx 安装教程 [图🐰文]","text":"ArchLinux 安装教程 启动 从安装介质启动 ArchLinux 并选择 ArchLinux archlinuxiso x86_64 UEFI CD 引导启动 PS:当前假设你以 UEFI 方式引导 Arch Linux如果你是 Legacy BIOS 方式界面会稍有不同 当屏幕出现命令提示符及闪烁的光标即启动完毕 设置 Arch ISO网络连接测试通过 ping 命令测试网络连通性 1$ ping -c 4 qq.com 同步时间同步时间以确保时间准确无误 1$ timedatectl set-ntp true 选择软件源由于你知道的原因在天朝访问一些国外网站的速度可想而知，选择合适的软件源头以获得更高的下载速度 1$ vim /etc/pacman.d/mirrorlist 打开镜像源列表 搜索 China 然后把需要的镜像源地址剪切到文件的最前面即可 中国大陆用户可使用以下命令选取大陆镜像服务器。 1$ sed -i '/China/!{n;/Server/s/^/#/};t;n' /etc/pacman.d/mirrorlist 启动环境检测UEFI/BIOS 检测1$ ls /sys/firmware/efi/efivars 如果出现上图执行结果则表明 ArchISO 以 UEFI 模式启动反之则是 Legacy BIOS or CSM 兼容模式 分区 UEFI 启动对应 GUID 分区表 Legacy BIOS 方式启动对应 MBR分区表 分区方案 一般而言对于 Linux 需要至少需要一个分区分配给根目录 / 对于 UEFI 则额外需要一个 UEFI 系统分区 ESP 通常也叫做 EFI 分区 分区操作你可以使用 fdisk -l or lsblk 查看和确定目标磁盘或分区 123$ fdisk -l## 或者$ lsblk 使用 cfdisk 对目标磁盘进行分区操作 [推荐 cfdisk] 1$ cfdisk /dev/sdX # sdX 为目标磁盘 由于在虚拟机中作为演示我只分配了 20G 的磁盘空间作为分割，我分了三个分区分别是： EFI System ( ESP 分区)/boot （用于存储启动文件和内核）/ （根分区 也就是上面提到的必须要分配的） 对于 ESP 分区 300MB 就差不多够了，boot 分区因为内核更新新旧版本残留可能会占用一些空间可以酌情分配 然后使用格式化工具进行格式化操作，推荐使用 ext4 文件系统 （一般都是使用这个经历了时间的考验）ext4 的格式化工具是 mkfs.ext4 1$ mkfs.ext4 /dev/sdXY # sdXY 为目标分区 依次格式化你分配的分区 /boot / 如有其他需要也可以分配 /home 等，根据实际情况自行判断 对于 ESP 分区 使用 msfs.fat 进行格式化 不然会导致 UEFI BIOS 无法获取启动引导文件 挂载分区 挂载需要按照一定的顺序进行 1$ mount &lt;分区&gt; &lt;挂载点&gt; 安装基础系统使用 pacstrap 脚本，安装 base 组 123$ pacstrap -i /mnt base linux linux-firmware dhcpcd## 如果需要其他软件 比如 `base-devel`$ pacstrap -i /mnt base base-devel linux linux-firmware dhcpcd 配置基础系统生成分区表 生成只会可以手动 cat 查看生成是否有误 1$ genfstab -U /mnt &gt;&gt; /mnt/etc/fstab 使用 arch-chroot 进入刚安装好的基础系统进行配置操作 1$ arch-chroot /mnt 修改时区假设你在中国可以使用 Asia Shanghai 作为时区位置 1$ ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime 硬件时间设置1$ hwclock --systohc 区域设置 (Region)通过编辑 /etc/locale.gen 将需要的 locale 取消注释即可 (行头的 # 号) 然后使用命令 locale-gen 生成 locale 我一般只选择：en_US.UTF-8 UTF-8zh_CN.UTF-8 UTF-8zh_TW.UTF-8 UTF-8 设置默认 locale1$ echo LANG=en_US.UTF-8 &gt; /etc/locale.conf PS:我建议使用 en_US 作为默认的 locale 因为这样不造成 tty 乱码，而且一般遇到问题也可以凭借嘤文错误信息在 搜索引擎 中更加方便的找到解决方案 设置主机名123$ echo &lt;主机名&gt; &gt; /etc/hostname## 例如$ echo ArchLinux &gt; /etc/hostname 然后在 /etc/hosts 添加 123127.0.0.1 localhost.localdomain localhost::1 localhost.localdomain localhost127.0.1.1 &lt;主机名&gt;.localdomain &lt;主机名&gt; 网络配置 有线连接 1$ systemctl enable dhcpcd 无线连接 1$ pacman -S iw wpa_supplicant dialog Initramfs 一般情况下你不需要创建 initramfs 如果你修改了 mkinitcpio.conf 则用下面的命令生成 initramfs 1$ mkinitcpio -P PS：保险起见我建议还是执行一下为妙 设置 Root 密码1$ passwd 安装引导程序一般通常使用 Grub 作为引导程序 BIOS 系统 123$ pacman -S grub os-prober$ grub-install --target=i386-pc /dev/sdX # sdX 为目标磁盘$ grub-mkconfig -o /boot/grub/grub.cfg UEFI 系统 123$ pacman -S dosfstools grub efibootmgr$ grub-install --target=x86_64-efi --efi-directory=&lt;EFI 分区挂载点&gt; --bootloader-id=grub$ grub-mkconfig -o /boot/grub/grub.cfg 用我的虚拟机做示例： 123$ pacman -S dosfstools grub efibootmgr$ grub-install --target=x86_64-efi --efi-directory=/boot/EFI --bootloader-id=archlinux$ grub-mkconfig -o /boot/grub/grub.cfg 完成安装使用 exit 或者 Ctrl + D 返回安装环境 卸载分区 1$ umount -R /mnt 重启： 1$ reboot 记得移除安装介质 用户管理 日常不建议使用 root 用户虽然我 VPS 用惯了敲命令老是不加 sudo 烦躁了就直接换成 root 随便浪😂 添加用户使用 useradd 添加用户，具体详细使用方面请自行找男人(manual) 或者 help 帮助信息 1$ useradd -m -g users -s /bin/bash cloverkit 创建一个名为 cloverkit 的用户，指定登录 shell 为 bash，所属主用户组 users，并在 /home 下创建同名用户文件夹。 1passwd cloverkit 为 cloverkit 设置用户密码 普通用户提权配置 使用刚创建的用户登陆系统，你会发现进行一些需要提权的操作即使加入 sudo 也无法 提权，我们可以通过 visudo 修改配置文件将我们的普通用户加入提权列表 大概是在第 79 行 是 root 用户代配置，我们只需要比葫芦画瓢就行在其下方添加如下 :wq 保存即可 1&lt;用户名&gt; ALL=(ALL) ALL 参考资料 官方 Wiki | Installation guide (简体中文)Arch Linux 安装指南[2018.03.01]","link":"/2018/08/20/ArchLinx-%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B-%E5%9B%BE%F0%9F%90%B0%E6%96%87/"},{"title":"iTerm2 终端美化指北","text":"0x01 前期准备 终端软件: iTerm2 Shell 解释器: zsh (macOS Catalina 默认) Oh-My-Zsh 0x02 终端配置 字体: JetBrains Mono 配色方案: Dracula for iTerm 2 配置步骤:iTerm -&gt; Preferences -&gt; Appearance-&gt; General:Theme =&gt; MinimalStatus ar location =&gt; Bottom iTerm -&gt; Preferences -&gt; Profiles -&gt; Default -&gt; Color: iTerm -&gt; Preferences -&gt; Profiles -&gt; Default -&gt; Text:Font =&gt; JetBrains Mono Regular 12 iTerm -&gt; Preferences -&gt; Profiles -&gt; Default -&gt; Window:Columns =&gt; 120Rows =&gt; 30 iTerm -&gt; Preferences -&gt; Profiles -&gt; Default -&gt; Session:Status bar enabled =&gt; EnableAdvanced -&gt; Prefer tight packing to stable positioning =&gt; Enable 0x03 Oh-My-Zsh 配置 ZSH_THEME: agnoster 插件: zsh-autosuggestions zsh-syntax-highlighting","link":"/2020/02/25/iTerm2-%E7%BB%88%E7%AB%AF%E7%BE%8E%E5%8C%96%E6%8C%87%E5%8C%97/"},{"title":"macOS 临时切换应用的界面语言","text":"话说自从 macOS 10.13.2 发布之后 Apple 给天朝用户带来了独一无二的 Apple 式中文体验。让我们领略到了中华文化的博大精深我不由得发出感叹：“这他喵的都是些什么东西？！” 此次更新 Apple 为多个应用和功能新增了简体中文名称你们自行感受下😨😂 Finder：访达Safari：Safari 浏览器Dock：程序坞Mission Control：调度中心Spotlight：聚焦Automator：自动操作Spotlight 搜索：聚焦搜索Handoff：接力Nightshift：夜览FileVault：文件保险箱Power Nap：电能小憩AirDrop：隔空投送 Apple：“很惭愧，就做了一点微小的工作，谢谢大家” 因为看起来实在是辣眼睛，笔者直接将 嘤文 设置为系统默认语言；但是由次也带来了一些问题，例如我使用 CrossOver 安装一些 Win32 应用会因为系统语言设置的问题而乱码，最初我还以为是配置除了问题知道我折腾到怀疑人生，才意识到是语言的问题。 还有就是当我打开 Photoshop 亦或是 Office 办公套件 这类大型专业软件的时候会显得不知所措，很多陌生的词汇看不懂还有像 Word Excel PowerPoint 在处理中英文时存在差异，也会带来不必要的麻烦。 那么我们难道就此退缩了吗？去面对那辣眼睛的特色翻译😂？ 当然不可以！我们可以使用 Terminal 加入相应的参数来达到临时修改切换应用界面语言的目的 示例： 12345## 以简体中文界面启动 Safari 浏览器open -a /Applications/Safari.app --args -AppleLanguages '(zh-CN)'## 以英文界面启动 Safari 浏览器open -a /Applications/Safari.app --args -AppleLanguages '(en)' 当然如果你想以其他语言启动某个应用程序，只需要修改将上述命令最后的地区代码。 常见的有： 繁体中文（zh-TW)日文（ja）法文（fr)德文（de) 如果你想要始终以某种与系统设置不同的语言启动特定应用，可以用 defaults write 命令来修改其默认设置。 具体语法是： 1defaults write [应用的 Bundle ID] AppleLanguages '([要默认显示的语言])' 例如 12# 默认以简体中文打开「文本编辑」应用defaults write com.apple.TextEdit AppleLanguages '(zh-CN)' 其中，应用的 Bundle ID 可以通过运行 mdls -name kMDItemCFBundleIdentifier [应用程序路径] 来查找。 例如： 123# Chrome 浏览器的 Bundle IDmdls -name kMDItemCFBundleIdentifier /Applications/Google\\ Chrome.app&gt; kMDItemCFBundleIdentifier = &quot;com.google.Chrome&quot; 如果不再需要固定应用程序的显示语言，在终端运行： 1defaults delete [应用的 Bundle ID] AppleLanguages 参考资料： 如何临时修改 macOS 应用的界面语言","link":"/2018/08/12/macOS-%E4%B8%B4%E6%97%B6%E5%88%87%E6%8D%A2%E5%BA%94%E7%94%A8%E7%9A%84%E7%95%8C%E9%9D%A2%E8%AF%AD%E8%A8%80/"},{"title":"macOS 使用 DOSBox 搭建 8086 汇编环境","text":"0x00 什么是汇编语言 汇编语言（英语：assembly language) 是一种用于电子计算机、微处理器、微控制器，或其他可编程器件的低级语言。在不同的设备中，汇编语言对应着不同的机器语言指令集。一种汇编语言专用于某种计算机系统结构，而不像许多高级语言，可以在不同系统平台之间移植。 0x01 安装 DOSBox在 macOS 平台我们一般习惯于通过 App Store 来安装所需的软件,可惜的是 DOSBox 并没有在 App Store 上架, 我们可以通过访问其官方网站来了解和下载它 官方网站:https://www.dosbox.com/download.php?main=1 除此之外在 macOS 平台还有一种优雅的软件安装方式, 使用 Homebrew 包管理来安装想要的软件,如果你安装了 Homebrew 可以在终端输入下面的命令快速获得 DOSBox 1brew cask install dosbox 我这里已经安装好了,所以出现 already installed 提示信息 0x02 配置 DOSBox 模拟器初次打开 DOSBox 你将会看到如下图所示的界面 我们需要用到 debug 和 masm 编译器等程序来学习 8086 汇编, 下面将通过 mount 命令挂载当前 用户目录 下的 masm 文件夹为 C:\\ 盘驱动器共享本机和模拟器的数据 masm 文件夹里有以下文件: 然后直接在命令行执行 debug 命令就可以进入 debug 调试程序的交互界面 不过,每一次都需要手动挂载目录岂不是太不方便了!通过查阅 DOSBox 的官方文档,发现可以通过修改 dosbox.conf 配置文件来设置模拟器的各项参数和启动时执行的命令, 这样的话我们只需要在 dosbox.conf 中加入所需的 “初始化” 命令就可以实现自动化操作 macOS 系统中 dosbox.conf 位于:~/Library/Preferences/DOSBox\\ 0.74-2\\ Preferences 图中的 高亮行 就是我加入的命令,大家可以根据实际情况修改 0x03 相关程序下载 百度云☁️：链接: https://pan.baidu.com/s/1GlbyyEF6MgAQoqAf_K9BDg邀请码: jhjg 0x04 参考资料DOSBox 官方文档","link":"/2019/06/17/macOS-%E4%BD%BF%E7%94%A8-DOSBox-%E6%90%AD%E5%BB%BA-8086-%E6%B1%87%E7%BC%96%E7%8E%AF%E5%A2%83/"},{"title":"Windows 10 下访问校园网共享服务器","text":"前言在我们学校的课堂和日常学习中，经常会访问 \\\\192.168.88.88 这么一个 IP 地址 它是学校为了解决各终端设备之间的文件共享问题所搭建的内网 SMB 服务器 经过初步扫描发现学校的 SMB 有三务器进行负载均衡,每台各存储不同的资料内容 问题由于宿舍宽带接入通过学校的网关我们可以直接在资源管理器中直接访问 SMB 服务器 我猜想学校使用了 VLAN 技术把宿舍的宽带和内网以某种方式形成一个 LAN 局域网 然而在实际使用中却发生了问题，已知任何几台电脑都可以正常访问，但是在宿舍却打不开 分析: 经过测试 SMB 在 Windows 7 系统中能够正常访问，而 Windows 10 或者 macOS Mojave 和 Linux 中均无法打开；而在 macOS 中能够使用命令扫描到内网有 SMB 开放端口和共享目录 后来通过 Google 发现了问题的关键，原因是学校的 SMB 文件服务器使用的协议版本太老了 解决： 我们可以通过启用系统中的 SMB 旧版本支持来实现正常访问 通过 Windows 搜索或者面板找到 启用或关闭 Windows 功能 ![](https://raw.githubusercontent.com/cloverkits/hexo_picture_resource/master/picture/Windows Search.png) 勾选 SMB 1.0/CIFS File Sharing Support 支持, 并按 确定键应用更改![](https://raw.githubusercontent.com/cloverkits/hexo_picture_resource/master/picture/Enable Windows Feature.png) 重启电脑 在资源管理器访问 \\\\192.168.88.88 并输入你的 校园统一门户 账号密码完成登录","link":"/2018/12/15/smb-solve/"},{"title":"使用 BaiduPCS-Go 破解百度云下载限速","text":"近几年来网盘服务一个个的“倒下”，留给我们用户的选择不多了。更由于一些众所周知的原因诸如 Dropbox Google Drive 这类优秀的国外网盘天朝用户是用不了的，你可能会说不是还有 Microsoft OneDrive 吗？ 但是对于非付费用户 OneDrive 的访问速度也是差强人意的；还记得在那个”百家争鸣“的年代各类国产网盘服务如雨后春笋一般不断“涌现”。 一时间百度云，360网盘 ，华为网盘 ，UC云 ……动辄上 TB 的免费存储容量支持离线下载在那个网速不算快的年代给我们提供了极大的便利。由于竞争激烈网盘服务商们纷纷声称自己可以提供下载加速，我记得那时候的 百度云 确实可以加速下载。 后来国家对知识产权的保护得到加强和完善，盗版资源越来越难留存于世各类网盘服务商需要面临整治盗版和严打网络低俗资源的传播。监管的压力和运营成本是他们意识到再做下去已经不划算了。于是乎随便找个理由“关门大吉”。 最后剩下来的只有少数几个其中的大头就是 百度云 (由于百度业务调整“百度云”更名为“百度网盘”但是我们还是习惯将其称作“百度云”)；失去了大量竞争对手也就成了“垄断”的存在，百度云 完成了从 百度云 到 百毒云 的“华丽”转变。 普通用户下载限速到 1Mbps 以下，普通会员限半速超级会员不限速但也不加速😂 这套路满满啊！但是你能不用他吗？答案是否定的。。。 最近发现了 GitHub 上有一个优秀的开源项目 BaiduPCS-GO 是一款百度云 命令行客户端 BaiduPCS-Go 百度网盘客户端仿 Linux shell 文件处理命令的百度网盘命令行客户端.This project was largely inspired by GangZhuo/BaiduPCS 特色: 多平台支持, 支持 Windows, macOS, linux, 移动设备等.百度帐号多用户支持;通配符匹配网盘路径和 Tab 自动补齐命令和路径, 通配符_百度百科;下载网盘内文件, 支持多个文件或目录下载, 支持断点续传和单文件并行下载;上传本地文件, 支持上传大文件(&gt;2GB), 支持多个文件或目录上传;离线下载, 支持http/https/ftp/电驴/磁力链协议. ![Releases](https://raw.githubusercontent.com/cloverkits/hexo_picture_resource/master/picture/BaiduPCS-Go Release.jpg) 首先在官方 Releases 页面下载你需要的版本，笔者使用的是 macOS 选择 BaiduPCS-Go-v3.5.3-darwin-osx-amd64.zip CPU 架构区别： amd arm misp 说明 amd64, x64 arm64 mips64, mips64le 适用于64位CPU或操作系统的计算机 386, x86 armv5, armv7 mips, mipsle 适用于32位CPU或操作系统的计算机 ![](https://raw.githubusercontent.com/cloverkits/hexo_picture_resource/master/picture/Copy Document.jpg) 下载之后解压到你想要的地方，为了方便调用我用 alias 创建了一个快捷命令 baidudl 修改你的 .bashrc .zshrc 或者其他 Shell 配置文件，修改完成之后使用 source ~/.zshrc 同步修改(这里拿zsh作为例子) ![](https://raw.githubusercontent.com/cloverkits/hexo_picture_resource/master/picture/addition alias.jpg) 然后就可以使用 baidudl 轻松调用了 我们可以使用 help 命令获得使用帮助 操作还是比较简单的☺️ ![](https://raw.githubusercontent.com/cloverkits/hexo_picture_resource/master/picture/exmple download.jpg) 速度还是挺不错的，因为我家带宽的原因看起来不算很快但是已经达到峰值了 注：如果你是 Windows 用户直接下载对应的版本解压之后直接双击 exe 文件就可以直接运行了，然后你可以创建 桌面快捷方式 这样就可以快速打开了","link":"/2018/08/13/%E4%BD%BF%E7%94%A8-BaiduPCS-Go-%E7%A0%B4%E8%A7%A3%E7%99%BE%E5%BA%A6%E4%BA%91%E4%B8%8B%E8%BD%BD%E9%99%90%E9%80%9F/"},{"title":"使用 Docker 搭建 MTProxy TG 专用代理","text":"Telegram Telegram 是一款开源且跨平台的 IM 工具（类似 Whatsapp、Messenger、微信），是我用过所有同类软件中用户体验最好的一个，同时我也是 Telegram 重度用户和开发者。当然，这么好用的工具在天朝是难以访问的。 —李钊同学 由于你知道的原因，Telegram 在天朝默认情况下是无法使用的，当然你可以先打开 Shadowsocks 或是 V2Ray 等代理软件正常访问国际互联网，然后才可以正常使用 Telegram 但是这样就让 IM软件失去了一部分使用体验。 前段时间 俄罗斯🇷🇺当局因 Telegram 公司不提供通讯加密密钥(为了信息审查)为由决定屏蔽 Telegram 服务，但最终没有获得成功为此 俄罗斯当局还屏蔽了 Google Microsoft 等公司的云服务器 IP段 可谓是用心良苦。Telegram 为了对抗封锁开发了 MTProxy Telegram 专用代理；对于处于同样情况的天朝来说也可以通过它正常使用 Telegram 服务 MTProxy MTProxy 是在新版本 Telegram 中内置的代理程序 MTProxy的命名，大概和MTProto有关Telegram 团队使用自己设计的加密协议 MTProto ，并以 30 万美金的高价奖赏漏洞的提交者。Telegram 使用基于 MTProto 的通讯协议。 在新版的 Telegram 中 Proxy 设置已经新增了 MTProxy 支持，我们只需要把相应的地址和密钥填入就能愉快的玩耍了 下面说一下如何使用 Docker 快速部署 安装 Docker使用官方简化命令安装:12345678## 适用于 Linux$ curl -fsSL get.docker.com -o get-docker.sh$ sudo sh get-docker.sh --mirror Aliyun //使用阿里云镜像源加速## 启动 Docker$ sudo systemctl enable docker$ sudo systemctl start docker 部署 MTProxy 官方 Docker 镜像123456789101112131415161718$ docker pull telegrammessenger/proxy$ docker run -d -p&lt;port&gt;:443 --name=mtproto-proxy --restart=always -v proxy-config:/data telegrammessenger/proxy:latest ## &lt;port&gt; 修改为你想要的端口$ docker logs mtproto-proxy## 查看你的链接信息## 会输出如下信息######## Telegram Proxy####[+] Using the secret in /data/secret: 'xxxxxxxxxxxxxxxxxxxxxxxx'.[*] Final configuration:[*] Secret 1: xxxxxxxxxxxxxxxxxxxxxxxx[*] tg:// link for secret 1 auto configuration: tg://proxy?server=你的服务器地址6&amp;port=443&amp;secret=xxxxxxxxxxxxxxxxxxxxxxxx[*] t.me link for secret 1: https://t.me/proxy?server=你的服务器地址6&amp;port=443&amp;secret=xxxxxxxxxxxxxxxxxxxxxxxx[*] Tag: no tag[*] External IP: 你的服务器地址[*] Make sure to fix the links in case you run the proxy on a different port. PS:使用 docker logs mtproto-proxy 查询到的链接其中的端口是默认的请根据你使用的端口酌情修改 使用 macOS Telegram 客户端作示例 参考：Docker 从入门到实践 | 安装 Dockertelegrammessenger/proxy","link":"/2018/08/18/%E4%BD%BF%E7%94%A8-Docker-%E6%90%AD%E5%BB%BA-MTProxy-TG-%E4%B8%93%E7%94%A8%E4%BB%A3%E7%90%86/"},{"title":"如何使用 macOS 优雅的截图","text":"如图所示 macOS 原生支持 快捷键 截图，我们可以在 系统偏好设置 中发现这一点 有以下几种截图 快捷键 组合方式： 截取全屏并保存到桌面 Command + Shift + 3 截取选定区域并保存到桌面 Command + Shift + 4 截取全屏保存到剪切板📋 Command + Control + Shift + 3 截取选定区域保存到剪切板📋 Command + Control + Shift + 3 Tips：选择模式截图时可轻按 Space 选中所需截取的窗口会自动截取当前选定的窗口并添加纯白背景保留阴影效果","link":"/2018/08/17/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-macOS-%E4%BC%98%E9%9B%85%E7%9A%84%E6%88%AA%E5%9B%BE/"},{"title":"使用 Github 搭建免费图床","text":"前言最近尝试着使用 GitHub + Hexo 搭建了一个个人博客，之所以选择这样的方案主要是因为 免费 还有就是对于 Hexo 的好奇吧！使用 GitHub Page 服务可以免除一些麻烦同时得益于 Git 强大的版本控制，我可以随时追溯到任何一个版本；后来在实际维护博客的时候我发现了一个问题：“我的那些图片该怎么办？！” 经过一番搜索 🔍 在网上看到的推荐大都是使用 七牛云 imgur 等服务或者现成的图床，因为你知道的原因 Imgur Google Photos 等服务在天朝是无法使用的，而 七牛云 则需要实名认证 我不是很愿意提供自己的身份信息（还有就是因为懒）就放弃了这个方案。 就在今天我实在受不了了，决定拿出身份证准备实名认证的同时，我突然想起来既然 Blog 都托管到 GitHub 了那图片为什么不放到 GitHub 呢？ 于是我发现了这样一个实用的工具 gitPic 使用它可以非常便捷的使用 GitHub 搭建图床 依赖 Java =&gt; 8 git PS: 如果你没有安装 Java 环境那么你打开 gitPic 会看到如下提示 ![](https://raw.githubusercontent.com/cloverkits/hexo_picture_resource/master/picture/Java Guid.png) 使用首先在 GitHub 创建一个 Repository 名称随意(You like jiu OK👌) 其他细节不在赘述。在创建完成之后克隆到本地目录，然后打开 gitPic 进行简单的配置就可以使用了 ![gitPic](https://raw.githubusercontent.com/cloverkits/hexo_picture_resource/master/picture/gitPic Push.png) PS: 项目目录就是你刚克隆到本地的 Repository 仓库 图片保存目录可以自定义你可以在本地仓库中新建一个文件夹📁 Git 图片路径是在你 选择图片 并 提交上传 之后生成的我们复制它到博文就可以看到效果了 下面是我的本地 Repository 目录结构 ![tree](https://raw.githubusercontent.com/cloverkits/hexo_picture_resource/master/picture/document tree.png) 本文参考：gitPic,利用Github做图床小工具gitPic GitHub","link":"/2018/08/17/%E4%BD%BF%E7%94%A8-Github-%E6%90%AD%E5%BB%BA%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A/"},{"title":"找回 macOS 允许任何来源选项","text":"在 macOS Sierra 之后 Apple 默认隐藏了 允许任何来源 的安装选项，给我们日常使用带来了极大的不便 当你安装其他来源应用的时候😂 解决方法： 打开终端，键入命令，输入密码，然后回车sudo spctl --master-disable 然后打开“安全性与隐私”，发现久违的“任何来源”回来了","link":"/2018/08/27/%E6%89%BE%E5%9B%9E-macOS-%E5%85%81%E8%AE%B8%E4%BB%BB%E4%BD%95%E6%9D%A5%E6%BA%90%E9%80%89%E9%A1%B9/"},{"title":"如何用好谷歌等搜索引擎","text":"搜索引擎命令大全1、双引号把搜索词放在双引号中，代表完全匹配搜索，也就是说搜索结果返回的页面包含双引号中出现的所有的词，连顺序也必须完全匹配。Baidu 和 Google 都支持这个指令。例如搜索： “seo方法图片” 2、减号减号代表搜索不包含减号后面的词的页面。使用这个指令时减号前面必须是空格，减号后面没有空格，紧跟着需要排除的词。Google 和 Baidu 都支持这个指令。例如：搜索 -引擎返回的则是包含“搜索”这个词，却不包含“引擎”这个词的结果 3、星号星号*是常用的通配符，也可以用在搜索中。Baidu不支持*号搜索指令。比如在 Google 中搜索：搜索*擎其中的*号代表任何文字。返回的结果就不仅包含“搜索引擎”，还包含了“搜索收擎”，“搜索巨擎”等内容。 4、inurlinurl: 指令用于搜索查询词出现在 url 中的页面。Baidu 和 Google 都支持 inurl 指令。inurl 指令支持中文和英文。比如搜索：inurl: 搜索引擎优化返回的结果都是网址url 中包含“搜索引擎优化”的页面。由于关键词出现在 url 中对排名有一定影响，使用 inurl: 搜索可以更准确地找到竞争对手。 5、inanchorinanchor: 指令返回的结果是导入链接锚文字中包含搜索词的页面。Baidu 不支持 inanchor。比如在 Google 搜索：inanchor: 点击这里返回的结果页面本身并不一定包含“点击这里”这四个字，而是指向这些页面的链接锚文字中出现了“点击这里”这四个字。可以用来找到某个关键词的竞争对收，而且这些竞争对手往往是做过 SEO 的。研究竞争对手页面有哪些外部链接，就可以找到很多链接资源。 6、intitleintitle: 指令返回的是页面 title 中包含关键词的页面。 Google 和 Baidu 都支持 intitle 指令。使用 intitle 指令找到的文件是更准确的竞争页面。如果关键词只出现在页面可见文字中，而没有出现在 title 中，大部分情况是并没有针对关键词进行优化，所以也不是有力的竞争对手。 7、allintitleallintitle: 搜索返回的是页面标题中包含多组关键词的文件。例如 ： allintitle:SEO 搜索引擎优化就相当于：intitle:SEO intitle: 搜索引擎优化返回的是标题中中既包含“SEO”，也包含“搜索引擎优化”的页面 8、allinurl与 allintitle: 类似。allinurl:SEO 搜索引擎优化就相当于:inurl:SEO inurl:搜索引擎优化 9、filetype用于搜索特定文件格式。Google 和 Baidu 都支持 filetype 指令。比如搜索 filetype:pdf SEO返回的就是包含 SEO 这个关键词的所有pdf 文件。 10、sitesite: 是 SEO 最熟悉的高级搜索指令，用来搜索某个域名下的所有文件。 11、linkdomainlinkdomain: 指令只适用于 Yahoo，返回的是某个域名的反向链接。雅虎的反向链接数据还比较准确，是 SEO 人员研究竞争对手外部链接情况的重要工具之一。比如搜索 linkdomain:http://cnseotool.com -site:http://cnseotool.com得到的就是点石网站的外部链接，因为 -site:http://cnseotool.com 已经排除了点石本身的页面，也就是内部链接，剩下的就都是外部链接了。 12、relatedrelated: 指令只适用于 Google ，返回的结果是与某个网站有关联的页面。比如搜索 related:http://cnseotool.com 我们就可以得到 Google 所认为的与点石网站有关联的其他页面。 这种关联到底指的是什么，Google 并没有明确说明，一般认为指的是有共同外部链接的网站。 上面介绍的这几个高级搜索指令，单独使用可以找到不少资源，或者可以更精确地定位竞争对手。把这些指令混合起来使用则更强大。 – inurl:gov 减肥返回的就是 url 中包含 gov，页面中有“减肥”这个词的页面。很多 SEO 人员认为 GVM 和学校网站有比较高的权重，找到相关的 GVM 和学校网站，就找到了最好的链接资源。下面这个指令返回的是来自 .中国教育和科研计算机网CERNET ，也就是学校域名上的包含“交换链接”这个词的页面：inurl:.中国教育和科研计算机网CERNET 交换链接 从中 SEO 人员可以找到愿意交换链接的学校网站。 或者使用一个更精确的搜索： inurl:.中国教育和科研计算机网CERNET intitle:交换链接 返回的则是来自中国教育和科研计算机网CERNET 域名，标题中包含“交换链接”这四个字的页面，返回的结果大部分应该是愿意交换链接的学校网站。 再比如下面这个指令： inurl:中国教育和科研计算机网CERNET*register 返回的结果是在.中国教育和科研计算机网CERNET 域名上，url 中包含“forum”以及“register”这两个单词的页面，也就是学校论坛的注册页面。找到这些论坛，也就找到了能在高权重域名上留下签名的很多机会。 下面这个指令返回的是页面与减肥有关，url 中包含links 这个单词的页面： 减肥 inurl:links 很多站长把交换链接页面命名为 links.html 等，所以这个指令返回的就是与减肥主题相关的交换链接页面。 下面这个指令返回的是 url 中包含 http://gov.cn 以及 links 的页面，也就是 GVM 域名上的交换链接页面： allinurl:gov.cn+links 最后一个例子，在雅虎搜索这个指令： linkdomain:http://cnseotool.com -linkdomain:http://cnseotool.com返回的是链接到点石网站，却没有链接到我的博客的网站。使用这个指令可以找到很多连向你的竞争对手或其他同行业网站，却没连向你的网站的页面，这些网站是最好的链接资源。高级搜索指令组合使用变化多端，功能强大。一个合格的 SEO 必须熟练掌握这几个常用指令的意义及组合方法，才能更有效率地找到更多竞争对手和链接资源。 找外链的时候你可以用这几种命令组合，例如 site:.com inurl:blog “post a comment” -”comments closed” -”you must be logged in” “输入你的关键词“ ， site:.com 是 指， 只显示 .com 的网站。 如果你想要 org 的链接，就换成 site:.org ，inurl:blog 是指博客。 “post a comment” -”comments closed” -”you must be logged in” 是指， “能够写评论的” 减去“ 关闭评论的” 再减去“ 必须要登录才能写评论的”。 – 原作者：崔凯链接：https://www.zhihu.com/question/20161362/answer/14180620来源：知乎","link":"/2018/08/12/%E5%A6%82%E4%BD%95%E7%94%A8%E5%A5%BD%E8%B0%B7%E6%AD%8C%E7%AD%89%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"},{"title":"技嘉 H61M-DS2 Rev3.0 Ozmosis 167x BIOS 固件","text":"之前在逛论坛的偶然时候发现了 Ozmosis 这个引导程序刚开始我也没在意就是挺好奇的，一直想尝试一下毕竟 Clover EFI Bootloader 早已经用腻了 由于 Ozmosis 的模块需要插入到BIOS固件中风险比较高我一直想使用别人做好的固件 但是几度 Google 未果便萌生了自己修改 BIOS 固件的想法 得益于技嘉主板的 Dual BIOS 技术我几乎不用担心刷写 BIOS 所带来的潜在风险 由于 BIOS 芯片的容量只有 4MB 我不得不精简掉一些组件来插入最基本的 Ozmosis 模块 也因为容量的原因额外的驱动不得不需要放置到 EFI 分区的特定目录下 主要精简了以下组件:FilesystemTcpDxeDhcpDxeIp4ConfigDxeIp4DxeMtftp4DxeUdp4DxeDhcp6DxeIp6DxeMtftp6DxeUdp6Dxe 以上除了 Filesystem 外均为网络组件是网络启动使用的底层驱动程序一般用户用不到 很遗憾因为 apfs.efi 驱动太大了 在保证足够稳定的情况下 apfs.ffs 是塞不进去的 因而无法支持 APFS 文件系统安装 macOS 时请选择 macOS日志式进行安装 Edit: 经测试通过添加 ApfsDriverLoader.ffs 可以成功驱动 APFS 文件系统因为 Ozmosis 并不会自动创建 APFS 容器里所安装 macOS 的引导项我们需要手动添加它 Method： 添加一个 UEFI Shell (可以使用 CLOVER 自带的) 使用以下命令手动添加引导 1bcfg boot addp 0 fsx:\\System\\Library\\CoreServices\\boot.efi &quot;你想要的名称&quot; 注： fsx 为你安装 macOS的驱动器编号请自行更改通过 Shell 命令可以查看修改引导项 添加额外的驱动可以使用 help -b 查看帮助信息 Working: 网卡 显卡 声卡 休眠 / 唤醒","link":"/2018/08/07/%E6%8A%80%E5%98%89-H61M-DS2-Rev3-0-Ozmosis-167x-BIOS-%E5%9B%BA%E4%BB%B6/"},{"title":"配置 V2Ray 和路由器透明代理","text":"什么是 V2Ray？ V2Ray 是 Project V 下的一个工具。Project V 是一个包含一系列构建特定网络环境工具的项目kk，而 V2Ray 属于最核心的一个。官方中介绍Project V 提供了单一的内核和多种界面操作方式。内核（V2Ray）用于实际的网络交互、路由等针对网络数据的处理，而外围的用户界面程序提供了方便直接的操作流程。不过从时间上来说，先有 V2Ray 才有 Project V。 如果还是不理解，那么简单地说，V2Ray 是一个与 Shadowsocks 类似的代理软件，可以用来科学上网（翻墙）学习国外先进科学技术。 下面贴出我使用的配置使用了 VMess + Mux 如果需要 mKCP 动态端口 等其他功能请自行参考官方文档 客户端配置123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102{ &quot;log&quot;: { &quot;loglevel&quot;: &quot;warning&quot; }, &quot;inbound&quot;: { &quot;listen&quot;: &quot;127.0.0.1&quot;, &quot;port&quot;: 1080, &quot;protocol&quot;: &quot;socks&quot;, &quot;settings&quot;: { &quot;auth&quot;: &quot;noauth&quot;, &quot;udp&quot;: true, &quot;ip&quot;: &quot;127.0.0.1&quot; } }, &quot;outbound&quot;: { &quot;protocol&quot;: &quot;vmess&quot;, &quot;settings&quot;: { &quot;vnext&quot;: [ { &quot;address&quot;: &quot;xxxxxx.xxxx&quot;, //你的服务器域名或者地址 &quot;port&quot;: xxxxx, //你想要的端口 和服务器配置保持一致 &quot;users&quot;: [ { &quot;id&quot;: &quot;xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&quot;, //替换成你生成的 UUID 与服务器配置一致 &quot;level&quot;: 1, &quot;alterId&quot;: 64 } ] } ] }, &quot;mux&quot;: { &quot;enabled&quot;: true, &quot;concurrency&quot;: 8 } }, &quot;outboundDetour&quot;: [ { &quot;protocol&quot;: &quot;freedom&quot;, &quot;settings&quot;: {}, &quot;tag&quot;: &quot;direct&quot; } ], &quot;routing&quot;: { &quot;strategy&quot;: &quot;rules&quot;, &quot;settings&quot;: { &quot;rules&quot;: [ { &quot;type&quot;: &quot;field&quot;, &quot;port&quot;: &quot;54-79&quot;, &quot;outboundTag&quot;: &quot;direct&quot; }, { &quot;type&quot;: &quot;field&quot;, &quot;port&quot;: &quot;81-442&quot;, &quot;outboundTag&quot;: &quot;direct&quot; }, { &quot;type&quot;: &quot;field&quot;, &quot;port&quot;: &quot;444-65535&quot;, &quot;outboundTag&quot;: &quot;direct&quot; }, { &quot;type&quot;: &quot;field&quot;, &quot;domain&quot;: [ &quot;gc.kis.scr.kaspersky-labs.com&quot; ], &quot;outboundTag&quot;: &quot;direct&quot; }, { &quot;type&quot;: &quot;chinasites&quot;, &quot;outboundTag&quot;: &quot;direct&quot; }, { &quot;type&quot;: &quot;field&quot;, &quot;ip&quot;: [ &quot;0.0.0.0/8&quot;, &quot;10.0.0.0/8&quot;, &quot;100.64.0.0/10&quot;, &quot;127.0.0.0/8&quot;, &quot;169.254.0.0/16&quot;, &quot;172.16.0.0/12&quot;, &quot;192.0.0.0/24&quot;, &quot;192.0.2.0/24&quot;, &quot;192.168.0.0/16&quot;, &quot;198.18.0.0/15&quot;, &quot;198.51.100.0/24&quot;, &quot;203.0.113.0/24&quot;, &quot;::1/128&quot;, &quot;fc00::/7&quot;, &quot;fe80::/10&quot; ], &quot;outboundTag&quot;: &quot;direct&quot; }, { &quot;type&quot;: &quot;chinaip&quot;, &quot;outboundTag&quot;: &quot;direct&quot; } ] } }} 服务器配置123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960{ &quot;log&quot;: { &quot;access&quot;: &quot;/var/log/v2ray/access.log&quot;, &quot;error&quot;: &quot;/var/log/v2ray/error.log&quot;, &quot;loglevel&quot;: &quot;warning&quot; }, &quot;inbound&quot;: { &quot;port&quot;: xxxxx, //你想要的端口 &quot;protocol&quot;: &quot;vmess&quot;, &quot;settings&quot;: { &quot;clients&quot;: [ { &quot;id&quot;: &quot;xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&quot;, //你生成的 UUID &quot;level&quot;: 1, &quot;alterId&quot;: 64 } ] } }, &quot;outbound&quot;: { &quot;protocol&quot;: &quot;freedom&quot;, &quot;settings&quot;: {} }, &quot;inboundDetour&quot;: [], &quot;outboundDetour&quot;: [ { &quot;protocol&quot;: &quot;blackhole&quot;, &quot;settings&quot;: {}, &quot;tag&quot;: &quot;blocked&quot; } ], &quot;routing&quot;: { &quot;strategy&quot;: &quot;rules&quot;, &quot;settings&quot;: { &quot;rules&quot;: [ { &quot;type&quot;: &quot;field&quot;, &quot;ip&quot;: [ &quot;0.0.0.0/8&quot;, &quot;10.0.0.0/8&quot;, &quot;100.64.0.0/10&quot;, &quot;127.0.0.0/8&quot;, &quot;169.254.0.0/16&quot;, &quot;172.16.0.0/12&quot;, &quot;192.0.0.0/24&quot;, &quot;192.0.2.0/24&quot;, &quot;192.168.0.0/16&quot;, &quot;198.18.0.0/15&quot;, &quot;198.51.100.0/24&quot;, &quot;203.0.113.0/24&quot;, &quot;::1/128&quot;, &quot;fc00::/7&quot;, &quot;fe80::/10&quot; ], &quot;outboundTag&quot;: &quot;blocked&quot; } ] } }} 路由器透明代理配置文件123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114{ &quot;log&quot;: { &quot;loglevel&quot;: &quot;warning&quot; }, &quot;inbound&quot;: { &quot;listen&quot;: &quot;0.0.0.0&quot;, &quot;port&quot;: 1080, &quot;protocol&quot;: &quot;socks&quot;, &quot;settings&quot;: { &quot;auth&quot;: &quot;noauth&quot;, &quot;udp&quot;: true, &quot;ip&quot;: &quot;127.0.0.1&quot; } }, &quot;outbound&quot;: { &quot;protocol&quot;: &quot;vmess&quot;, &quot;settings&quot;: { &quot;vnext&quot;: [ { &quot;address&quot;: &quot;xxx.xxx.xxx.xxx&quot;, //你的服务器地址或者域名 &quot;port&quot;: xxxxx, //你想要的端口号 &quot;users&quot;: [ { &quot;id&quot;: &quot;xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxx&quot;, //你生成的UUID &quot;level&quot;: 1, &quot;alterId&quot;: 64 } ] } ] }, &quot;mux&quot;: { &quot;enabled&quot;: true, &quot;concurrency&quot;: 8 } }, &quot;inboundDetour&quot;:[ { &quot;protocol&quot;:&quot;dokodemo-door&quot;, &quot;port&quot;:1099, &quot;settings&quot;:{ &quot;address&quot;:&quot;&quot;, &quot;network&quot;:&quot;tcp&quot;, &quot;timeout&quot;:0, &quot;followRedirect&quot;:true } } ], &quot;outboundDetour&quot;: [ { &quot;protocol&quot;: &quot;freedom&quot;, &quot;settings&quot;: {}, &quot;tag&quot;: &quot;direct&quot; } ], &quot;routing&quot;: { &quot;strategy&quot;: &quot;rules&quot;, &quot;settings&quot;: { &quot;rules&quot;: [ { &quot;type&quot;: &quot;field&quot;, &quot;port&quot;: &quot;54-79&quot;, &quot;outboundTag&quot;: &quot;direct&quot; }, { &quot;type&quot;: &quot;field&quot;, &quot;port&quot;: &quot;81-442&quot;, &quot;outboundTag&quot;: &quot;direct&quot; }, { &quot;type&quot;: &quot;field&quot;, &quot;port&quot;: &quot;444-65535&quot;, &quot;outboundTag&quot;: &quot;direct&quot; }, { &quot;type&quot;: &quot;field&quot;, &quot;domain&quot;: [ &quot;gc.kis.scr.kaspersky-labs.com&quot; ], &quot;outboundTag&quot;: &quot;direct&quot; }, { &quot;type&quot;: &quot;chinasites&quot;, &quot;outboundTag&quot;: &quot;direct&quot; }, { &quot;type&quot;: &quot;field&quot;, &quot;ip&quot;: [ &quot;0.0.0.0/8&quot;, &quot;10.0.0.0/8&quot;, &quot;100.64.0.0/10&quot;, &quot;127.0.0.0/8&quot;, &quot;169.254.0.0/16&quot;, &quot;172.16.0.0/12&quot;, &quot;192.0.0.0/24&quot;, &quot;192.0.2.0/24&quot;, &quot;192.168.0.0/16&quot;, &quot;198.18.0.0/15&quot;, &quot;198.51.100.0/24&quot;, &quot;203.0.113.0/24&quot;, &quot;::1/128&quot;, &quot;fc00::/7&quot;, &quot;fe80::/10&quot; ], &quot;outboundTag&quot;: &quot;direct&quot; }, { &quot;type&quot;: &quot;chinaip&quot;, &quot;outboundTag&quot;: &quot;direct&quot; } ] } }} 笔者在自己的 Newifi Mini 上安装了 老毛子Pandora固件 自带 V2Ray 扩展程序 经过一番配置终于得以正常使用😂 并开启了 ChinaDNS 防止 DNS 污染 对于路由器透明代理主要是添加一下代码 port 就是透明代理的端口 123456789101112&quot;inboundDetour&quot;:[ { &quot;protocol&quot;:&quot;dokodemo-door&quot;, &quot;port&quot;:1099, &quot;settings&quot;:{ &quot;address&quot;:&quot;&quot;, &quot;network&quot;:&quot;tcp&quot;, &quot;timeout&quot;:0, &quot;followRedirect&quot;:true } } ], 其他路由器固件可以参考以上配置自行修改 不保证一定可用建议 UUID 一定要自己生成因为它相当于 Shadowsocks 的密码为了安全性切勿直接 Copy 别人配置里的对于 macOS 我们可用直接通过 Terminal 使用 uuidgen 命令轻松生成 UUID 其他系统请自行 Google 也可以使用在线 UUID 网站生成","link":"/2018/08/07/%E9%85%8D%E7%BD%AE-V2Ray-%E5%92%8C%E8%B7%AF%E7%94%B1%E5%99%A8%E9%80%8F%E6%98%8E%E4%BB%A3%E7%90%86/"}],"tags":[{"name":"C语言","slug":"C语言","link":"/tags/C%E8%AF%AD%E8%A8%80/"},{"name":"Arch Linux","slug":"Arch-Linux","link":"/tags/Arch-Linux/"},{"name":"折腾","slug":"折腾","link":"/tags/%E6%8A%98%E8%85%BE/"},{"name":"教程","slug":"教程","link":"/tags/%E6%95%99%E7%A8%8B/"},{"name":"Terminal","slug":"Terminal","link":"/tags/Terminal/"},{"name":"技巧","slug":"技巧","link":"/tags/%E6%8A%80%E5%B7%A7/"},{"name":"Telegram","slug":"Telegram","link":"/tags/Telegram/"},{"name":"科学上网","slug":"科学上网","link":"/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"},{"name":"GitHub","slug":"GitHub","link":"/tags/GitHub/"},{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"SEO","slug":"SEO","link":"/tags/SEO/"}],"categories":[{"name":"书籍","slug":"书籍","link":"/categories/%E4%B9%A6%E7%B1%8D/"},{"name":"Linux","slug":"Linux","link":"/categories/Linux/"},{"name":"Hackintosh &amp; macOS","slug":"Hackintosh-macOS","link":"/categories/Hackintosh-macOS/"},{"name":"汇编","slug":"汇编","link":"/categories/%E6%B1%87%E7%BC%96/"},{"name":"校园生活","slug":"校园生活","link":"/categories/%E6%A0%A1%E5%9B%AD%E7%94%9F%E6%B4%BB/"},{"name":"工具","slug":"工具","link":"/categories/%E5%B7%A5%E5%85%B7/"},{"name":"Docker","slug":"Docker","link":"/categories/Docker/"},{"name":"搜索引擎","slug":"搜索引擎","link":"/categories/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"},{"name":"科学上网","slug":"科学上网","link":"/categories/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"}]}